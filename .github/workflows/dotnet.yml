name: .NET

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
defaults:
  run:
    working-directory: ./Src
jobs:
  build:

    runs-on: ubuntu-latest

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: docker-action-pass
          POSTGRES_USER: docker-action
          POSTGRES_DB: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Restore dependencies
      run: dotnet restore DeUrgenta.sln
    - name: Build
      run: dotnet build --no-restore DeUrgenta.sln
    - name: Test with dotnet
      run: dotnet test DeUrgenta.sln --logger trx --results-directory "TestResults-${{ matrix.dotnet-version }}"
      env:
        # Connection string
        ConnectionStrings__TestingDbConnectionString: Server=localhost;Port=5432;Database=de-urgenta-test-db;User Id=docker-action;Password=docker-action-pass;
    - name: Upload dotnet test results
      uses: actions/upload-artifact@v2
      with:
        name: dotnet-results-${{ matrix.dotnet-version }}
        path: TestResults-${{ matrix.dotnet-version }}
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}
