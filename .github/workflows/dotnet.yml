name: .NET

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

defaults:
  run: 
    working-directory: ./Src
env:
  DB_CONNECTION_STRING: Server=localhost;Port=5432;Database=de-urgenta-specs-db;User Id=docker;Password=docker; 
  
jobs:
  build:
    runs-on: ubuntu-latest

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: docker-action-pass
          POSTGRES_USER: docker-action
          POSTGRES_DB: postgres
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Restore dependencies
      run: dotnet restore DeUrgenta.sln
    - name: Build
      run: dotnet build --no-restore DeUrgenta.sln
    - name: Apply migrations for test db
      run: |
        dotnet ef database update --project DeUrgenta.Domain --startup-project DeUrgenta.Api --context DeUrgentaContext --connection $DB_CONNECTION_STRING
        dotnet ef database update --project DeUrgenta.User.Api --startup-project DeUrgenta.Api --context UserDbContext --connection $DB_CONNECTION_STRING
    - name: Run unit & integration tests
      run: |
        dotnet test 
        --no-restore
        --results-directory ./testresults 
        --logger "trx" 
        /p:CollectCoverage=true 
        /p:CoverletOutputFormat=cobertura 
        /p:CoverletOutput=/testresults/coverage/ 
        /p:Exclude="[xunit.*]*%2c[DeUrgenta.Tests.Helpers.*]*" 
        ./DeUrgenta.sln
      env:
        # Connection string
        ConnectionStrings__TestingDbConnectionString: $DB_CONNECTION_STRING
    - name: Upload dotnet test results
      uses: actions/upload-artifact@v2
      with:
        name: testresults
        path: testresults
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}
